%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.1 (Build 16B2555) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 192 192
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 192 192
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
96.199997 0.69999999 m
43.700001 0.69999999 1 43.299999 1 95.699997 c
1 121.1 10.9 145 28.799999 163 c
46.799999 181.10001 70.699997 191 96.099998 191 c
148.60001 191 191.3 148.3 191.39999 95.900002 c
191.39999 43.400002 148.7 0.69999999 96.199997 0.69999999 c
96.199997 0.69999999 l
96.199997 0.69999999 l
h
W*
0 0 192 192 rc
-4 196 m
196.39999 196 l
196.39999 -4.3000002 l
-4 -4.3000002 l
h
f
Q
0 0 0 sc
q
0 0 192 192 rc
1 0 0 -1 1 191 cm
95.199997 190.3 m
42.700001 190.3 0 147.7 0 95.300003 c
0 69.900002 9.8999996 46 27.799999 28 c
45.799999 9.8999996 69.699997 0 95.099998 0 c
147.60001 0 190.3 42.700001 190.39999 95.099998 c
190.39999 147.60001 147.7 190.3 95.199997 190.3 c
95.199997 190.3 l
95.199997 190.3 l
h
S
Q
q
96.199997 110.6 m
85.599998 110.6 76.900002 119.2 76.900002 129.89999 c
76.900002 140.5 85.5 149.2 96.199997 149.2 c
106.8 149.2 115.5 140.60001 115.5 129.89999 c
115.4 119.2 106.8 110.6 96.199997 110.6 c
96.199997 147.7 m
86.300003 147.7 78.300003 139.7 78.300003 129.8 c
78.300003 119.9 86.300003 111.9 96.199997 111.9 c
106.1 111.9 114.1 119.9 114.1 129.8 c
114.1 139.7 106 147.7 96.199997 147.7 c
W*
0 0 192 192 rc
71.900002 154.2 m
120.5 154.2 l
120.5 105.6 l
71.900002 105.6 l
h
f
Q
q
86.099998 140 m
86.099998 126.1 l
86.099998 120.5 90.599998 116 96.199997 116 c
101.8 116 106.3 120.5 106.3 126.1 c
106.3 140 l
86.099998 140 l
86.099998 140 l
h
87.800003 123.8 m
89.099998 126 l
90.400002 123.8 l
87.800003 123.8 l
87.800003 123.8 l
h
92 123.8 m
89.900002 127.5 l
90.900002 129.2 l
94 123.8 l
92 123.8 l
92 123.8 l
h
95.599998 123.8 m
91.699997 130.60001 l
92.699997 132.3 l
97.5 123.8 l
95.599998 123.8 l
95.599998 123.8 l
h
99.300003 123.8 m
93.599998 133.7 l
94.599998 135.3 l
101.2 123.8 l
99.300003 123.8 l
99.300003 123.8 l
h
102.8 123.8 m
95.300003 136.8 l
96.300003 138.5 l
104.7 123.8 l
102.8 123.8 l
102.8 123.8 l
h
W*
0 0 192 192 rc
81.099998 145 m
111.3 145 l
111.3 111 l
81.099998 111 l
h
f
Q
q
46.900002 80.300003 m
49.5 80.300003 l
53.700001 80.300003 54.200001 82.800003 54.200001 89.199997 c
54.200001 95.599998 53.700001 98.099998 49.5 98.099998 c
46.900002 98.099998 l
46.900002 80.300003 l
46.900002 80.300003 l
h
50.5 102.6 m
57.700001 102.6 59.900002 98.800003 59.900002 89.199997 c
59.900002 79.599998 57.700001 75.800003 50.5 75.800003 c
41.299999 75.800003 l
41.299999 102.6 l
50.5 102.6 l
50.5 102.6 l
h
62.799999 102.6 m
77.300003 102.6 l
77.300003 98 l
68.5 98 l
68.5 92.300003 l
76.599998 92.300003 l
76.599998 87.599998 l
68.5 87.599998 l
68.5 80.400002 l
77.300003 80.400002 l
77.300003 75.699997 l
62.799999 75.699997 l
62.799999 102.6 l
62.799999 102.6 l
h
92.800003 86.400002 m
90.099998 97.5 l
87.300003 86.400002 l
92.800003 86.400002 l
92.800003 86.400002 l
h
93.900002 81.699997 m
86.099998 81.699997 l
84.699997 75.699997 l
79.099998 75.699997 l
86.699997 102.5 l
93.900002 102.5 l
101.3 75.699997 l
95.400002 75.699997 l
93.900002 81.699997 l
93.900002 81.699997 l
h
103 102.6 m
108.6 102.6 l
108.6 90.900002 l
115.6 102.6 l
121.5 102.6 l
113.7 90.300003 l
121.5 75.800003 l
115 75.800003 l
108.7 88.800003 l
108.7 75.800003 l
103 75.800003 l
103 102.6 l
103 102.6 l
h
123.9 102.6 m
129.3 102.6 l
129.3 75.800003 l
123.9 75.800003 l
123.9 102.6 l
123.9 102.6 l
h
137.8 93.300003 m
137.8 75.699997 l
133 75.699997 l
133 102.6 l
139.7 102.6 l
146.2 86.099998 l
146.2 102.6 l
151.10001 102.6 l
151.10001 75.800003 l
145 75.800003 l
137.8 93.300003 l
137.8 93.300003 l
h
W*
0 0 192 192 rc
36.299999 107.6 m
156.10001 107.6 l
156.10001 70.699997 l
36.299999 70.699997 l
h
f
Q
q
49.099998 60.099998 m
49.099998 68.699997 l
49.099998 68.800003 49.200001 68.800003 49.299999 68.900002 c
49.400002 69 49.599998 69 49.799999 69 c
50 69 50.200001 69.099998 50.400002 69.099998 c
50.900002 69.099998 l
51.099998 69.099998 51.200001 69 51.299999 68.900002 c
51.400002 68.800003 51.5 68.599998 51.5 68.5 c
51.5 59.900002 l
51.5 59 51.400002 58.200001 51.200001 57.599998 c
51 57 50.700001 56.5 50.299999 56.099998 c
49.900002 55.700001 49.400002 55.400002 48.700001 55.299999 c
48.099998 55.099998 47.299999 55.099998 46.400002 55.099998 c
46.200001 55.099998 l
45.400002 55.099998 44.599998 55.200001 44 55.299999 c
43.400002 55.5 42.900002 55.700001 42.400002 56.099998 c
42 56.5 41.700001 57 41.5 57.599998 c
41.299999 58.200001 41.200001 59 41.200001 59.900002 c
41.200001 68.599998 l
41.200001 68.699997 41.299999 68.699997 41.400002 68.800003 c
41.5 68.900002 41.700001 68.900002 41.900002 68.900002 c
42.099998 68.900002 42.299999 69 42.5 69 c
43 69 l
43.200001 69 43.299999 68.900002 43.400002 68.800003 c
43.5 68.699997 43.599998 68.5 43.599998 68.400002 c
43.599998 59.900002 l
43.599998 59.400002 43.599998 58.900002 43.700001 58.5 c
43.799999 58.099998 43.900002 57.799999 44.099998 57.599998 c
44.299999 57.400002 44.599998 57.200001 44.900002 57.099998 c
45.299999 57 45.700001 56.900002 46.200001 56.900002 c
46.400002 56.900002 l
46.900002 56.900002 47.400002 57 47.799999 57.099998 c
48.200001 57.200001 48.400002 57.400002 48.700001 57.599998 c
48.900002 57.799999 49.099998 58.200001 49.200001 58.5 c
49.099998 59.099998 49.099998 59.5 49.099998 60.099998 c
W*
0 0 192 192 rc
36.200001 74.099998 m
56.5 74.099998 l
56.5 50.099998 l
36.200001 50.099998 l
h
f
Q
q
63.5 59.200001 m
63.5 68.699997 l
63.5 68.800003 63.599998 68.800003 63.700001 68.900002 c
63.799999 68.900002 64 69 64.199997 69 c
64.400002 69 64.599998 69 64.800003 69.099998 c
65.300003 69.099998 l
65.599998 69.099998 65.800003 68.900002 65.800003 68.5 c
65.800003 55.400002 l
65.800003 55.200001 65.699997 55.099998 65.599998 55 c
65.5 54.900002 65.400002 54.900002 65.199997 54.900002 c
64.800003 54.900002 l
64.599998 54.900002 64.5 54.900002 64.300003 55 c
64.099998 55 64 55.099998 63.799999 55.099998 c
63.700001 55.099998 63.599998 55.200001 63.5 55.299999 c
57.299999 64.800003 l
57.299999 55.5 l
57.299999 55.299999 57.200001 55.200001 57.099998 55.099998 c
57 55 56.900002 55 56.700001 55 c
56.200001 55 l
56 55 55.799999 55 55.599998 55.099998 c
55.400002 55.099998 55.299999 55.200001 55.099998 55.200001 c
55 55.299999 54.900002 55.299999 54.900002 55.400002 c
54.900002 68.699997 l
54.900002 68.800003 55 68.800003 55.099998 68.900002 c
55.200001 69 55.400002 69 55.599998 69 c
55.799999 69 56 69 56.200001 69.099998 c
56.700001 69.099998 l
56.799999 69.099998 57 69.099998 57.099998 69 c
57.200001 68.900002 57.299999 68.800003 57.299999 68.699997 c
63.5 59.200001 l
63.5 59.200001 l
h
W*
0 0 192 192 rc
49.900002 74.099998 m
70.800003 74.099998 l
70.800003 49.900002 l
49.900002 49.900002 l
h
f
Q
q
71.699997 55.5 m
71.699997 55.299999 71.599998 55.200001 71.5 55.099998 c
71.400002 55 71.199997 55 71.099998 55 c
70.599998 55 l
70.400002 55 70.199997 55 70 55.099998 c
69.800003 55.099998 69.699997 55.200001 69.5 55.200001 c
69.400002 55.299999 69.300003 55.299999 69.300003 55.400002 c
69.300003 68.699997 l
69.300003 68.800003 69.400002 68.800003 69.5 68.900002 c
69.599998 69 69.800003 69 70 69 c
70.199997 69 70.400002 69 70.599998 69.099998 c
71.099998 69.099998 l
71.300003 69.099998 71.400002 69 71.5 68.900002 c
71.599998 68.800003 71.699997 68.699997 71.699997 68.5 c
71.699997 55.5 l
71.699997 55.5 l
h
W*
0 0 192 192 rc
64.300003 74.099998 m
76.699997 74.099998 l
76.699997 50 l
64.300003 50 l
h
f
Q
q
80.099998 58.900002 m
83 68.699997 l
83.199997 68.900002 83.400002 69 83.599998 69 c
83.800003 69 84.099998 69.099998 84.400002 69.099998 c
84.800003 69.099998 l
84.900002 69.099998 85 69.099998 85.099998 69 c
85.199997 69 85.300003 68.900002 85.300003 68.800003 c
85.300003 68.400002 l
80.900002 55.200001 l
80.900002 55.099998 80.800003 55 80.699997 55 c
80.599998 54.900002 80.5 54.900002 80.400002 54.900002 c
80 54.900002 79.599998 54.900002 79.300003 55 c
79 55 78.800003 55.099998 78.800003 55.200001 c
74.400002 68.400002 l
74.400002 68.699997 l
74.400002 68.800003 74.5 68.800003 74.599998 68.900002 c
74.699997 68.900002 74.800003 69 74.900002 69 c
75.099998 69 l
75.699997 69 l
75.900002 69 76.099998 69 76.199997 68.900002 c
76.400002 68.900002 76.5 68.800003 76.599998 68.800003 c
76.699997 68.699997 76.800003 68.699997 76.800003 68.599998 c
79.699997 58.799999 l
79.800003 58.599998 79.800003 58.5 79.800003 58.299999 c
79.800003 58.099998 79.800003 58 79.900002 57.799999 c
79.900002 58.299999 l
80 58.599998 80 58.700001 80.099998 58.900002 c
W*
0 0 192 192 rc
69.400002 74.099998 m
90.300003 74.099998 l
90.300003 49.900002 l
69.400002 49.900002 l
h
f
Q
q
88 55.599998 m
88 68.400002 l
88 68.599998 88.099998 68.699997 88.199997 68.800003 c
88.300003 68.900002 88.5 68.900002 88.599998 68.900002 c
96.199997 68.900002 l
96.300003 68.900002 96.5 68.800003 96.599998 68.699997 c
96.699997 68.599998 96.699997 68.5 96.699997 68.300003 c
96.699997 67.900002 l
96.699997 67.699997 96.699997 67.599998 96.599998 67.400002 c
96.599998 67.199997 96.5 67.099998 96.5 67 c
96.5 66.900002 96.400002 66.800003 96.300003 66.800003 c
90.300003 66.800003 l
90.300003 63.099998 l
95.5 63.099998 l
95.599998 63.099998 95.699997 63 95.800003 62.900002 c
95.900002 62.799999 95.900002 62.700001 95.900002 62.5 c
95.900002 62.099998 l
95.900002 61.900002 95.900002 61.799999 95.800003 61.599998 c
95.800003 61.400002 95.699997 61.299999 95.699997 61.200001 c
95.599998 61.099998 95.599998 61 95.5 61 c
90.199997 61 l
90.199997 57.099998 l
96.099998 57.099998 l
96.199997 57.099998 96.400002 57 96.5 56.900002 c
96.599998 56.799999 96.599998 56.700001 96.599998 56.5 c
96.599998 56.099998 l
96.599998 55.900002 96.599998 55.799999 96.5 55.599998 c
96.5 55.400002 96.400002 55.299999 96.400002 55.200001 c
96.400002 55.099998 96.300003 55 96.199997 55 c
88.699997 55 l
88.5 55 88.300003 55 88.099998 55.099998 c
88.099998 55.400002 88 55.5 88 55.599998 c
W*
0 0 192 192 rc
83 73.900002 m
101.7 73.900002 l
101.7 50 l
83 50 l
h
f
Q
q
99.900002 55.400002 m
99.900002 68.400002 l
99.900002 68.5 100 68.699997 100.1 68.800003 c
100.2 68.900002 100.4 68.900002 100.5 68.900002 c
104.7 68.900002 l
105.6 68.900002 106.3 68.800003 106.9 68.699997 c
107.5 68.599998 108 68.300003 108.4 68 c
108.8 67.699997 109.1 67.300003 109.3 66.699997 c
109.5 66.199997 109.6 65.5 109.6 64.699997 c
109.6 64.300003 l
109.6 63.700001 109.6 63.200001 109.5 62.700001 c
109.4 62.299999 109.3 61.900002 109.1 61.599998 c
108.9 61.299999 108.6 61 108.3 60.799999 c
108 60.599998 107.6 60.5 107.1 60.400002 c
109.7 55.799999 l
109.8 55.599998 109.9 55.400002 109.9 55.299999 c
109.9 55.200001 109.9 55.200001 109.8 55.099998 c
109.7 55 109.7 55 109.6 55 c
109.4 55 l
109.2 55 l
108.8 55 l
108.6 55 108.4 55 108.3 55.099998 c
108.1 55.099998 108 55.200001 107.8 55.200001 c
107.7 55.299999 107.6 55.400002 107.5 55.5 c
104.7 60.299999 l
102.4 60.299999 l
102.4 55.5 l
102.4 55.299999 102.3 55.200001 102.2 55.099998 c
102.1 55 102 55 101.8 55 c
101.3 55 l
101.1 55 100.9 55 100.7 55.099998 c
100.5 55.099998 100.4 55.200001 100.2 55.200001 c
100 55.299999 99.900002 55.299999 99.900002 55.400002 c
104.8 66.900002 m
102.2 66.900002 l
102.2 62.299999 l
104.8 62.299999 l
105.3 62.299999 105.7 62.299999 106 62.400002 c
106.3 62.5 106.5 62.599998 106.7 62.700001 c
106.9 62.900002 107 63.099998 107 63.299999 c
107.1 63.599998 107.1 63.900002 107.1 64.300003 c
107.1 64.699997 l
107.1 65.099998 107.1 65.5 107 65.800003 c
106.9 66.099998 106.8 66.300003 106.7 66.400002 c
106.5 66.599998 106.3 66.699997 106 66.699997 c
105.7 66.800003 105.3 66.900002 104.8 66.900002 c
W*
0 0 192 192 rc
94.900002 73.900002 m
114.9 73.900002 l
114.9 50 l
94.900002 50 l
h
f
Q
q
112.7 57.299999 m
112.8 57.299999 113 57.200001 113.2 57.200001 c
113.4 57.200001 113.6 57.099998 113.9 57 c
114.2 56.900002 114.5 56.900002 114.8 56.900002 c
115.1 56.900002 115.4 56.799999 115.8 56.799999 c
116.2 56.799999 116.5 56.799999 116.8 56.900002 c
117.1 57 117.4 57.099998 117.7 57.200001 c
118 57.299999 118.2 57.5 118.3 57.700001 c
118.5 57.900002 118.5 58.200001 118.5 58.5 c
118.5 59 118.4 59.299999 118.1 59.700001 c
117.8 60 117.4 60.299999 117 60.599998 c
116.6 60.900002 116.1 61.200001 115.5 61.400002 c
115 61.700001 114.5 62 114 62.400002 c
113.5 62.799999 113.2 63.200001 112.9 63.700001 c
112.6 64.199997 112.5 64.800003 112.5 65.599998 c
112.5 66.199997 112.6 66.699997 112.8 67.199997 c
113 67.599998 113.3 68 113.7 68.300003 c
114.1 68.599998 114.6 68.800003 115.1 68.900002 c
115.6 69 116.2 69.099998 116.9 69.099998 c
117.5 69.099998 l
117.8 69.099998 118.1 69.099998 118.4 69 c
118.7 69 119 68.900002 119.3 68.900002 c
119.6 68.800003 119.9 68.800003 120.1 68.699997 c
120.3 68.599998 120.4 68.5 120.4 68.5 c
120.4 68.099998 l
120.4 67.800003 120.3 67.5 120.2 67.300003 c
120.1 67.099998 119.9 67 119.7 67 c
119.4 67.099998 119 67.099998 118.6 67.199997 c
118.2 67.300003 117.7 67.300003 117.2 67.300003 c
116.4 67.300003 115.8 67.199997 115.3 67 c
114.8 66.800003 114.6 66.400002 114.6 65.900002 c
114.6 65.5 114.7 65.099998 115 64.800003 c
115.3 64.5 115.7 64.199997 116.1 63.900002 c
116.5 63.599998 117 63.299999 117.6 63.099998 c
118.1 62.799999 118.6 62.5 119.1 62.099998 c
119.5 61.700001 119.9 61.299999 120.2 60.700001 c
120.5 60.200001 120.6 59.5 120.6 58.700001 c
120.6 58 120.5 57.400002 120.2 56.900002 c
119.9 56.400002 119.6 56.099998 119.1 55.799999 c
118.7 55.5 118.1 55.400002 117.5 55.200001 c
116.9 55.099998 116.3 55 115.7 55 c
114.8 55 l
114.5 55 114.2 55 113.9 55.099998 c
113.6 55.099998 113.3 55.200001 113 55.200001 c
112.7 55.299999 112.5 55.299999 112.3 55.400002 c
112.1 55.5 112 55.5 112 55.599998 c
112 56 l
112 56.400002 112.1 56.700001 112.2 56.900002 c
112.4 57.299999 112.5 57.400002 112.7 57.299999 c
W*
0 0 192 192 rc
107 74.099998 m
125.6 74.099998 l
125.6 50 l
107 50 l
h
f
Q
q
126.1 55.5 m
126.1 55.299999 126 55.200001 125.9 55.099998 c
125.8 55 125.6 55 125.5 55 c
125 55 l
124.8 55 124.6 55 124.4 55.099998 c
124.2 55.099998 124.1 55.200001 123.9 55.200001 c
123.8 55.299999 123.7 55.299999 123.7 55.400002 c
123.7 68.699997 l
123.7 68.800003 123.8 68.800003 123.9 68.900002 c
124 69 124.2 69 124.4 69 c
124.6 69 124.8 69 125 69.099998 c
125.5 69.099998 l
125.7 69.099998 125.8 69 125.9 68.900002 c
126 68.800003 126.1 68.699997 126.1 68.5 c
126.1 55.5 l
126.1 55.5 l
h
W*
0 0 192 192 rc
118.7 74.099998 m
131.10001 74.099998 l
131.10001 50 l
118.7 50 l
h
f
Q
q
134.89999 66.900002 m
134.89999 55.599998 l
134.89999 55.400002 134.8 55.299999 134.7 55.200001 c
134.60001 55.099998 134.39999 55.099998 134.3 55.099998 c
133.8 55.099998 l
133.60001 55.099998 133.39999 55.099998 133.2 55.200001 c
133 55.200001 132.89999 55.299999 132.7 55.299999 c
132.60001 55.400002 132.5 55.400002 132.5 55.5 c
132.5 67 l
129 67 l
128.89999 67 128.7 67.099998 128.60001 67.199997 c
128.5 67.300003 128.5 67.400002 128.5 67.599998 c
128.5 68 l
128.5 68.199997 128.5 68.300003 128.60001 68.5 c
128.60001 68.699997 128.7 68.800003 128.7 68.900002 c
128.7 69 128.8 69.099998 128.89999 69.099998 c
138.3 69.099998 l
138.39999 69.099998 138.60001 69 138.7 68.900002 c
138.8 68.800003 138.8 68.699997 138.8 68.5 c
138.8 68.099998 l
138.8 67.900002 138.8 67.800003 138.7 67.599998 c
138.7 67.400002 138.60001 67.300003 138.60001 67.199997 c
138.5 67.099998 138.5 67 138.39999 67 c
134.89999 67 l
134.89999 66.900002 l
h
W*
0 0 192 192 rc
123.5 74.099998 m
143.8 74.099998 l
143.8 50.099998 l
123.5 50.099998 l
h
f
Q
q
146.89999 60.200001 m
146.89999 55.5 l
146.89999 55.299999 146.8 55.200001 146.7 55.099998 c
146.60001 55 146.39999 55 146.3 55 c
145.89999 55 l
145.7 55 145.5 55 145.3 55.099998 c
145.10001 55.099998 145 55.200001 144.8 55.200001 c
144.7 55.299999 144.60001 55.299999 144.60001 55.400002 c
144.60001 60.200001 l
140.5 68.300003 l
140.39999 68.599998 140.3 68.800003 140.39999 68.900002 c
140.5 69 140.7 69.099998 141 69.099998 c
141.5 69.099998 l
142 69.099998 l
142.2 69.099998 142.3 69 142.39999 69 c
142.5 69 142.60001 68.900002 142.60001 68.800003 c
145.60001 62.599998 l
148.60001 68.800003 l
148.60001 68.900002 148.7 68.900002 148.8 69 c
148.89999 69 149 69.099998 149.2 69.099998 c
149.7 69.099998 l
150.2 69.099998 l
150.5 69.099998 150.7 69 150.8 68.900002 c
150.89999 68.800003 150.89999 68.599998 150.7 68.300003 c
146.89999 60.200001 l
146.89999 60.200001 l
h
W*
0 0 192 192 rc
135.35858 74.099998 m
155.86569 74.099998 l
155.86569 50 l
135.35858 50 l
h
f
ep
end
%%Trailer
%%EOF
